#!/usr/bin/env python

"""
Simulate multi-object spectrograph CCD images given input spectra and PSF

Stephen Bailey, LBL
Summer 2013
"""

import sys
import os
import numpy as N
import optparse
import multiprocessing as MP

#- Parse options
parser = optparse.OptionParser(
    usage = "%prog [options]",
    epilog = "See $SPECTER_DIR/doc/datamodel.md for input format details"
    )
parser.add_option("-i", "--input", type="string",  help="input spectra")
parser.add_option("-I", "--image", type="string",  help="input image to add photons to")
parser.add_option("-o", "--output", type="string",  help="output image")
parser.add_option("-p", "--psf", type="string",  help="input PSF")
parser.add_option("-t", "--throughput", type="string",  help="input throughput file (default to throughtput in PSF file)")
parser.add_option("-n", "--noise", action="store_true", help="add noise")
parser.add_option("-N", "--readnoise", type="float", default=3.0, help="readout noise in electrons [%default]")
parser.add_option(      "--randseed", type="int", default=0, help="random number seed")
parser.add_option("-G", "--gaussnoise", action='store_true', help="Use Gaussian photon shot noise instead of Poisson")
parser.add_option("-g", "--gain", type="float", default=1.6, help="CCD gain [%default]")
parser.add_option("-T", "--exptime", type="float", help="exposure time [default value in throughput/psf file]")
parser.add_option("-x", "--extra", action='store_true', help="Write extra HDUs with input spectra, xyw models")
parser.add_option(      "--numcores", type="int", default=MP.cpu_count(), help="number of CPU cores to use [%default]")
parser.add_option(      "--test", action='store_true', help="Run a suite of tests; ignore other options")
parser.add_option("-s", "--sky", type="string",  help="input sky spectra")
parser.add_option("-w", "--wavelength", type="string",
    help="wavelength range min,max in Angstroms")
parser.add_option("-r", "--specrange", type="string",
    help="simulate spectra specmin to specmax inclusive")
parser.add_option("--debug", action="store_true", help="start ipython after running")
parser.add_option("--trimxy", action='store_true', help="Trim output image to just pixels with spectra")

opts, args = parser.parse_args()

#- Load fitsio after the parsing so that you can get help even without fitsio
try:
    import fitsio
except ImportError:
    print >> sys.stderr, "ERROR: specter requires the fitsio package, available from"
    print >> sys.stderr, "       https://github.com/esheldon/fitsio"
    sys.exit(1)

#- If fitsio was there, safe to proceed with other imports
import specter
from specter.psf import load_psf
from specter.throughput import load_throughput
import specter.util

#- Run tests and skip the rest if --test
if opts.test:
    import specter.test
    specter.test.test()
    sys.exit(0)

#- Check input option consistency
badopts = False
if opts.input is None:
    print >> sys.stderr, "ERROR: -i/--input spectra filename required"
    badopts = True
    
if opts.output is None:
    print >> sys.stderr, "ERROR: -o/--output image filename required"
    badopts = True

if opts.psf is None:
    print >> sys.stderr, "ERROR: -p/--psf input psf filename required"
    badopts = True

if opts.numcores < 1 or opts.numcores > MP.cpu_count():
    print >> sys.stderr, "WARNING: overriding numcores %d -> %d" % \
        (opts.numcores, MP.cpu_count())
    opts.numcores = MP.cpu_count()

if badopts:
    sys.exit(1)

#- Set random seed to ensure reproducibility
N.random.seed(opts.randseed)

#- Load input PSF and throughtput
psf = load_psf(opts.psf)
if opts.throughput:
    thru = load_throughput(opts.throughput)
else:
    thru = load_throughput(opts.psf)

#- Override default exposure time if needed
if opts.exptime is not None:
    thru.exptime = opts.exptime

#- Expand opts.specrange = first,last *inclusive* -> array of indices
if opts.specrange is not None:
    x = map(int, opts.specrange.split(','))
    x[1] = min(x[1]+1, psf.nspec)
    opts.specrange = range(x[0], x[1])
else:
    opts.specrange = range(psf.nspec)

nspec = len(opts.specrange)

#-  opts.wavelength is 2-elements min,max
if opts.wavelength is not None:
    opts.wavelength = map(float, opts.wavelength.split(','))
    wmin, wmax = opts.wavelength
else:
    wmin = N.min( psf.wavelength(None, y=-0.5) )        #- bottom edge of CCD
    wmax = N.max( psf.wavelength(None, y=psf.npix_y-0.5) ) #- top edge of CCD 
    opts.wavelength = [wmin, wmax]
    
#- Load input spectra
#- returns dictionary with keys flux, wavelength, units, objtype
spectra = specter.io.read_simspec(opts.input)
wavelength = spectra['wavelength']
flux = spectra['flux']
units = spectra['units']

#- Check if input spectra are less than PSF wavelength range
if N.min(wavelength) > wmin:
    opts.wavelength[0] = wmin = N.min(wavelength)

if N.max(wavelength) < wmax:
    opts.wavelength[1] = wmax = N.max(wavelength)

#- Expand to 2D if necessary and trim wavelength range
if wavelength.ndim == 1 and flux.ndim == 1:
    ii = (wmin <= wavelength) & (wavelength <= wmax)
    wavelength = wavelength[ii]
    flux = flux[ii]
    wavelength = N.tile(wavelength, nspec).reshape(nspec, len(wavelength))
    flux = N.tile(flux, nspec).reshape(nspec, len(flux))
elif wavelength.ndim == 1 and flux.ndim == 2:
    ii = (wmin <= wavelength) & (wavelength <= wmax)
    wavelength = wavelength[ii]
    wavelength = N.tile(wavelength, nspec).reshape(nspec, len(wavelength))

    flux = flux[:, ii]
    if flux.shape[0] > nspec:
        flux = flux[opts.specrange]
else:
    #- Trim wavelengths where all spectra are out of range
    ii = (wmin <= wavelength.min(axis=0)) & (wavelength.max(axis=0) <= wmax)
    wavelength = wavelength[:, ii]
    flux = flux[:, ii]
        
#- Expand objtype into array
objtype = spectra['objtype']
if isinstance(objtype, str) and (flux.ndim == 2):
    objtype = N.array( [objtype,] * flux.shape[0] )

if units.endswith('/A/arcsec^2'):
    flux *= thru.fiberarea
    units = units.replace('/A/arcsec^2', '/A')

#- Resample spectra to match CCD sub-pixel resolution
#- only do this for "per-Angstrom" units, not delta functions flux/phot at A
#- BUG: what if we go partially off the CCD for some spectra but not others?
if units.endswith('/A'):
    specrange = opts.specrange[0], opts.specrange[-1]+1
    waverange = opts.wavelength[0], opts.wavelength[-1]
    xmin, xmax, ymin, ymax = psf.xyrange(specrange, opts.wavelength)
    dy = 0.25
    yedges = N.arange(ymin-0.5, ymax-0.5+dy/2., dy)
    ymid = (yedges[0:-1] + yedges[1:])/2
    newwave = N.zeros( (nspec, len(ymid)) )
    newflux = N.zeros( (nspec, len(ymid)) )
    for i in range(nspec):
        wedges = psf.wavelength(i, y=yedges)
        wmid = psf.wavelength(i, y=ymid)
        newwave[i] = wmid
        newflux[i] = specter.util.resample(wedges, wavelength[i], flux[i], xedges=True)
        
    wavelength = newwave
    flux = newflux
    
#- For each spectrum, set flux=0 for wavelengths out of range
#- When spectral wavelength ranges are different, some may need trimming
#- even if others don't.
for i in range(flux.shape[0]):
    iibad = (wavelength[i] < wmin) | (wmax < wavelength[i])
    flux[i, iibad] = 0.0    

#- Convert flux to photons, and 1D -> 2D if needed
if flux.ndim == 1:
    photons = thru.photons(wavelength, flux, units, objtype=objtype[0])
    photons = N.tile(photons, nspec).reshape(nspec, len(photons))
    wavelength = N.tile(wavelength, nspec).reshape(nspec, len(wavelength))
else:
    photons = N.zeros(flux.shape)
    for i in range(photons.shape[0]):
        photons[i] = thru.photons(wavelength[i], flux[i], units, objtype=objtype[i])

#- Add sky spectrum
if opts.sky:
    sky = specter.io.read_simspec(opts.sky)
    if not units.endswith('/A') or not sky['units'].endswith('/A/arcsec^2'):
        print "I don't know how to combine these units"
        print units, sky['units']
        sys.exit(1)
    
    for i in range(nspec):
        wedges = psf.wavelength(i, y=yedges)
        skyflux = specter.util.resample(wedges, sky['wavelength'], sky['flux'], xedges=True)
        skyphot = thru.photons(wavelength[i], skyflux, sky['units'], objtype='SKY')
        photons[i] += skyphot
    
if opts.trimxy:
    specrange = opts.specrange[0], opts.specrange[-1]+1
    waverange = opts.wavelength[0], opts.wavelength[-1]
    xyrange = psf.xyrange(specrange, opts.wavelength)
else:
    xyrange = None

#- Project spectra onto the CCD
print "Projecting spectra onto CCD"
if opts.numcores == 1:
    img = psf.project(wavelength, photons, specmin=opts.specrange[0], xyrange=xyrange)
else:
    #- Parallel version uses function passed to parallel map
    #- Input dictionary provides parameters
    def project(args):
        psf = args['psf']
        return psf.project(args['wavelength'], args['photons'], args['specmin'], args['xyrange'])
    
    #- Setup list of dictionaries with arguments
    arglist = list()
    n = max(1, (len(opts.specrange)+1)/opts.numcores)
    for i in range(0, len(opts.specrange), n):
        arglist.append(dict(psf=psf, photons=photons[i:i+n],
                         wavelength=wavelength[i:i+n],
                         specmin=opts.specrange[i],
                         xyrange=xyrange)
                      )

    #- Parallel map to run project(arglist[0]), project(arglist[1]), etc.
    pool = MP.Pool(opts.numcores)
    images = pool.map(project, arglist)

    #- Add the individual images
    img = reduce(N.add, images)

#- Alternate parallel method; maybe has less overhead
"""
Create input queue
Create output queue
define function to
  - get (photons, wavelength, specmin) from input queue
  - process that
  - put resulting image on outut queue
  
put 8 sets of (photons, wavelength, specmin) into input queue
start 8 processes with the input, output queues
wait for them to finish
get 8 images off the output queue
add them
"""

#- Read imput CCD image
if opts.image:
    print "Loading input image"
    fx = fitsio.FITS(opts.image)
    input_image = fx[0].read()
    opts.readnoise = 0.0   #- Assume input image already has read noise

    #- Read inverse variance or derive from image
    if 'IVAR' in fx.hdu_map:
        input_var = 1.0/fx['IVAR'].read()
    elif len(fx) > 1:
        input_var = 1.0/fx[1].read()
    else:
        #- Robust noise estimate; RMS would get pulled by cosmic outliers.
        #- Assume sparse image of mostly noise; 68.27% is outside
        #- of +/- 1 sigma so 15.865% is below 1 sigma downward
        sigma = N.median(input_image) - N.percentile(input_image, 15.865)
        input_var = sigma**2
        input_readnoise = sigma

        if xyrange is not None:
            xmin, xmax, ymin, ymax = xyrange
            input_image = input_image[ymin:ymax, xmin:xmax]
            if input_var.ndim == 2:
                input_var = input_var[ymin:ymax, xmin:xmax]

    #- Read or derive read noise
    hdr = fx[0].read_header()
    if 'RDNOISE' in hdr:
        input_readnoise = hdr['RDNOISE']
    else:
        #- Per amp read-noise:
        amp_noise = list()
        for i in range(32):
            key = 'RDNOISE%d' % i
            if key in hdr:
                amp_noise.append(hdr[key])
        if len(amp_noise) > 0:
            input_readnoise = N.mean(amp_noise)
        else:
            input_readnoise = N.sqrt(N.median(input_var))   #- ???
            
    fx.close()  #- close input image file

#- Variance to add to new image
var = opts.readnoise**2 + img
if opts.gaussnoise:
    opts.noise = True

if opts.noise:
    print "Adding noise"
    if opts.gaussnoise:
        print "Adding Gaussian (not Poisson) noise"
        img += N.random.normal(scale=N.sqrt(var))
    else:
        #- photon shot noise (float -> int)
        img = N.random.poisson(img)
        
        #- Convert to ADU, add gaussian read noise, then integerize
        adu = img/opts.gain
        if opts.readnoise > 0:
            adu += N.random.normal(scale=opts.readnoise/opts.gain, size=img.shape)
                    
        adu = (adu+0.5).astype(int)  #- Integerize ADU
        img = adu * opts.gain        #- back to photons (and back to float)

#- Add to input image
if opts.image:
    if img.shape == input_image.shape:
        img += input_image
        var += input_var
    else:
        ny = min(input_image.shape[0], img.shape[0])
        nx = min(input_image.shape[1], img.shape[1])
        img[0:ny, 0:nx] += input_image[0:ny, 0:nx]
        var[0:ny, 0:nx] += input_var[0:ny, 0:nx]
    
#- Decide what to write for read noise
if opts.image:
    output_readnoise = input_readnoise
elif opts.noise:
    output_readnoise = opts.readnoise
else:
    output_readnoise = 0.0
        
#- Write output
print "Writing", opts.output
fitsio.write(opts.output, img, clobber=True, extname="CCDIMAGE")

#- Update header keywords
fx = fitsio.FITS(opts.output, 'rw')
fx[0].write_key('SIMDATA', True, 'Simulated image written by Specter')
fx[0].write_key('PREPROC', True, 'Preproc done (1=True, 0=False)')
fx[0].write_key('GAIN', opts.gain, 'Gain [e-/ADU]')
fx[0].write_key('RDNOISE', output_readnoise, 'Read noise [e-]')    
if opts.trimxy:
    #- TO DO: check logic; is -ymin, -xmin correct?  or -1 of that?
    #- is order correct?
    fx[0].write_key('CRPIX0', -xyrange[0])  #- negative xmin
    fx[0].write_key('CRPIX0', -xyrange[2])  #- negative ymin

if opts.gaussnoise:
    fx[0].write_key('SIMNOISE', 'Gaussian', 'Gaussian noise (not Poisson)')
elif opts.noise:
    fx[0].write_key('SIMNOISE', 'Poisson', 'Poisson photon noise + Gaussian read noise')
else:
    fx[0].write_key('SIMNOISE', 'None', "No noise (can't you tell?)")

fx.close()

#- Add IVAR HDU if noise was added
if opts.noise:
    fitsio.write(opts.output, 1.0/var, extname='IVAR')

#--- Write additional HDUs with extra info about inputs ---
if opts.extra:
    #- Trim arrays to just those with information    
    ii = N.where(N.any(photons>0, axis=0))[0]
    ii = range(ii[0], ii[-1]+1)
    photons = photons[:, ii]
    wavelength = wavelength[:, ii]
    nwave = wavelength.shape[1]

    #- Spectra in photon units
    a = N.array(zip(photons, wavelength),
                dtype=[('PHOTONS',     str(photons.dtype), (nwave,)),
                       ('WAVELENGTH',  str(wavelength.dtype), (nwave,)),
                       ])
    hdr = [dict(name='SPECMIN', value=opts.specrange[0], comment="First spectrum index"), ]
    fitsio.write(opts.output, a, extname='PHOTONS', header=hdr)
    
    #- X,Y vs. wavelength
    yy = N.arange(psf.npix_y)
    y = N.tile(yy, nspec).reshape(nspec, psf.npix_y)
    x = N.zeros(y.shape)
    w = N.zeros(y.shape)
    
    for i in range(nspec):
        w[i] = psf.wavelength(ispec=i+opts.specrange[0], y=yy)
        x[i] = psf.x(ispec=i+opts.specrange[0], wavelength=w[i])
    
    a = N.array(zip(x, y, w),
                dtype=[('X', str(x.dtype), (psf.npix_y,)),
                       ('Y', str(y.dtype), (psf.npix_y,)),
                       ('WAVELENGTH',  str(wavelength.dtype), (psf.npix_y,)),
                       ])
    fitsio.write(opts.output, a, extname='XYWAVE', header=hdr)

if opts.debug:
    #--- DEBUG ---
    from pylab import *
    ion()
    import IPython
    IPython.embed()
    #--- DEBUG ---
    
