#!/usr/bin/env python

"""
Simulate multi-object spectrograph CCD images given input spectra and PSF

Stephen Bailey, LBL
Fall 2012
"""

import sys
import os
import numpy as N
import optparse
from specter.psf import load_psf
from specter.throughput import load_throughput
import fitsio

parser = optparse.OptionParser(
    usage = "%prog [options]",
    epilog = "See $SPECTER_DIR/doc/datamodel.md for input format details"
    )
parser.add_option("-i", "--input", type="string",  help="input spectra")
parser.add_option("-o", "--output", type="string",  help="output image")
parser.add_option("-p", "--psf", type="string",  help="input PSF")
parser.add_option("-t", "--throughput", type="string",  help="input throughput file")
parser.add_option("-n", "--noise", action="store_true", help="add noise")
parser.add_option("-N", "--readnoise", type="float", default=4.0, help="readout noise [%default]")
### parser.add_option("-s", "--sky", type="string",  help="input sky spectra")
parser.add_option("-w", "--wavelength", type="string",
    help="wavelength range min,max in Angstroms")
parser.add_option("-l", "--loglam", type="string",
    help="log10(wavelength[A]) range min,max")
parser.add_option("-r", "--specrange", type="string",
    help="range of spectra to simulate specmin,specmax")

opts, args = parser.parse_args()

#+ TODO: Test input consistency
#- required: --input, --output, --psf
#- exclusive: --wavelength or --loglam or neither, but not both

#- Load inputs
psf = load_psf(opts.psf)
if opts.throughput:
    thru = load_throughput(opts.throughput)
else:
    thru = load_throughput(opts.psf)
    
spectra = fitsio.read(opts.input, 1, lower=True).view(N.recarray)
header = fitsio.read_header(opts.input, 1)

#- Expand defaults
if opts.specrange is not None:
    x = map(int, opts.specrange.split(','))
    x[1] = min(x[1], psf.nspec)
    opts.specrange = range(x[0], x[1])
else:
    opts.specrange = range(psf.nspec)

#- Wavelength and loglam are just 2-elements min,max
if opts.wavelength is not None:
    opts.wavelength = map(float, opts.wavelength.split(','))
    opts.loglam = N.log10(opts.wavelength)
elif opts.loglam is not None:
    opts.loglam = map(float, opts.loglam.split(','))
    opts.wavelength = 10**opts.loglam
else:
    ll = psf.loglam()
    opts.loglam = N.array( [N.min(ll), N.max(ll)] )
    opts.wavelength = 10**opts.loglam
    
#- Get flux and wavelength arrays
wavelength = spectra['wavelength']
flux = spectra['flux']

#- Determine flux units from TUNITnn or FLUXUNIT keywords
key = 'TUNIT%d' % (spectra.dtype.names.index('flux')+1, )
if key in header:
    units = header[key].strip()
elif 'FLUXUNIT' in header:
    units = header['FLUXUNIT'].strip()
else:
    print >> sys.stderr, 'WARNING: using default flux units of erg/s/cm^2/A'
    units = 'erg/s/cm^2/A'

#- Make array of object types
if 'objtype' in spectra.dtype.names:
    objtype = spectra['objtype']
elif 'OBJTYPE' in header:
    objtype = N.array( [header['OBJTYPE'].strip(), ] * psf.nspec )

#- Convert 1D flux into 2D
if flux.ndim == 1:
    photons = thru.photons(wavelength, flux, units, objtype=objtype[0])
    flux = N.tile(photons, psf.nspec).reshape(psf.nspec, len(flux))
else:
    photons = N.zeros(flux.shape)
    for i in range(photons.shape[0]):
        photons[i] = thru.photons(wavelength, flux[i], units, objtype=objtype[i])

#- Trim to just requested specrange
photons = photons[opts.specrange]
if wavelength.ndim == 2:
    wavelength = wavelength[opts.specrange]

#- Trim wavelength range by setting flux=0 outside wavelength range
wmin, wmax = opts.wavelength
if wavelength.ndim == 1:
    ii = (wmin <= wavelength) & (wavelength <= wmax)
    flux = flux[:, ii]
    wavelength = wavelength[ii]
else:
    #- for 2D, just set flux=0 outside wavelength range
    ii = (wavelength < wmin) | (wmax < wavelength)
    flux[ii] = 0.0

#- Do the projection
#+ TODO: Add options for simulating xy subregion
img = psf.project(photons, wavelength, specmin=opts.specrange[0])

#- Add noise
#+ TODO: Add Gaussian vs. Poisson noise
#+ TODO: Add integerization and gain
if opts.noise:
    var = opts.readnoise**2 + img
    img += N.random.normal(scale=N.sqrt(var))
    
#- Write output
#+ TODO: Add options to write extra data (ivar, input spectra, etc.)
fitsio.write(opts.output, img, clobber=True)
if opts.noise:
    fitsio.write(opts.output, 1.0/var)

#- Update header with SIMDATA and PREPROC keyword
fx = fitsio.FITS(opts.output, 'rw')
fx[0].write_key('SIMDATA', True, 'Simulated image written by specter')
fx[0].write_key('PREPROC', True, 'Overscan subtraction and gain applied')
fx.close()
